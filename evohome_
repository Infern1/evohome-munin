#!/usr/bin/env python

"""
    Plugin to show setpoint and measured temperature of zone.
    Also show the outside temperature based on location

    To make this plugin work make sure you install the following:

    evohomeclient http://evohome-client.readthedocs.org/en/latest/
    #pip install ./evohome-client

    python-weather-api https://code.google.com/p/python-weather-api/
    #pip install --allow-all-external  pywapi  --allow-unverified pywapi


    ex: /etc/munin/plugin-conf.d/plugins
    [evohome*]
    user root

    To activate the plugin make a symlink
    #ln -s /usr/local/share/munin/plugins/evohome_ /usr/local/etc/munin/plugins/evohome_Zonename

    For zone names containing spaces, replace the spaces with underscores in the symlink name
"""


import os
import logging
import time
import sys
import json
import io
from pprint import pprint
import pywapi
from munin import MuninPlugin
from evohomeclient import EvohomeClient


class EvohomeMuninPlugin(MuninPlugin):

    """
    Set the below values to your own account

    Look up your location id at weather.com
    """
    username = 'user@mail.com'
    password = 'yoursecretpassword'
    location = 'NLXX0010'

    args = "--base 1000"  # -l 0 --upper-limit 40"
    vlabel = "temperature"
    scale = True

    fields = (
        ('temp', dict(
            label="Temperature",
            info="Temperature in Room",
            type="GAUGE",
            max="50"
        )),
        ('setpoint', dict(
            label="Temperature SP",
            info="Temperature Setpoint in Room",
            type="GAUGE",
            max="35",
            min="5"
        )),
        ('outside_temperature', dict(
            label="Outside Temperature",
            info="Temperature outside at location",
            type="GAUGE",
        )),
    )

    zonename_in_args = True
    category = "evohome"

    # Persistent storage of zone data, weather data and session id
    ZONE_DATA = "/tmp/munin-zone-data.json"
    WEATHER_DATA = "/tmp/munin-outside-temperature.json"
    SESSION_ID = "/tmp/munin-session-id.json"

    def __init__(self):
        super(EvohomeMuninPlugin, self).__init__()
        self.zonename = (sys.argv[0].split('_', 1)[-1].replace('_',' ')
                if self.zonename_in_args else None)

        if not self.zonename:
            sys.stderr.write('No zone name specified. Please consult the documentation about creating a symlink which includes the zone name.\n')
            sys.exit(1)
        # strip group/other permissions from json cache files
        os.umask(0o077)

    # write zone info to JSON file
    # if the file is not older than 4 minutes we don't need to fetch the data
    def write_zone_info(self):

        data = []
        try:
            stat = os.stat(self.ZONE_DATA)
        except OSError:
            age_minutes = 10
            size = 1
        else:
            age_minutes = (time.time() - stat.st_mtime) / 60
            size = stat.st_size

        if age_minutes > 4:
            # attempt to load previously saved session-id
            try:
                with io.open(self.SESSION_ID, "rb") as f:
                    user_data = json.load(f)
            except (IOError, ValueError):
                user_data = None

            try:
                client = EvohomeClient(self.username, self.password, user_data=user_data)
                for device in client.temperatures():
                    data.append(device)
            except Exception as error:
                sys.stderr.write('Connection failed: ' + str(error) + '\n')
                # truncate zone data cache so subsequent zone instances know a failure occurred.
                with io.open(self.ZONE_DATA, "wb") as f:
                    pass
                sys.exit(1)

            with io.open(self.ZONE_DATA, "wb") as f:
                json.dump(data, f)

            # save session-id so we don't need to re-authenticate every polling cycle. This avoids authentication rate limiting.
            with io.open(self.SESSION_ID, "wb") as f:
                json.dump(client.user_data, f)
        else:
            if size == 0:
                sys.stderr.write('Previous server connection failed. Waiting for next polling cycle to avoid rate limiting.\n')
                sys.exit(1)

    # write weather data to JSON file
    # if the file is not older than 14 minutes we don't need to fetch the data
    def write_weather_info(self):

        try:
            stat = os.stat(self.WEATHER_DATA)
        except OSError:
            age_minutes = 20
        else:
            age_minutes = (time.time() - stat.st_mtime) / 60

        if age_minutes > 14:
            weather = dict()
            try:
                weather_com_result = pywapi.get_weather_from_weather_com(self.location,  units = 'metric' )
                temp = weather_com_result['current_conditions']['temperature']
                station = weather_com_result['current_conditions']['station']
                weather['temperature'] = temp
                weather['station'] = station
            except Exception as error:
                sys.stderr.write('Unable to retrieve ' + str(error) + ' from weather.com.\n')
                weather['temperature'] = 'U'
                weather['station'] = 'Unknown'

            with io.open(self.WEATHER_DATA, "wb") as f:
                json.dump(weather, f)

    # Get room temperature
    def getzoneinfo(self):
        self.write_zone_info()
        self.write_weather_info()

        # Read zone data
        try:
            with io.open(self.ZONE_DATA, "rb") as f:
                data = json.load(f)
        except (IOError, ValueError):
            data = []

        # Read weather data
        try:
            with io.open(self.WEATHER_DATA, "rb") as f:
                data_weather = json.load(f)
        except (IOError, ValueError):
            data_weather = []

        outside_temperature = data_weather['temperature']
        # get the info from the requested zone
        for i in data:
            if i['name'] == self.zonename:
                temperature = i['temp']
                setpoint = i['setpoint']
                return temperature, setpoint,outside_temperature

        sys.stderr.write('Zone ' + self.zonename + ' not found. Please check the zone exists and is named correctly.\n')
        sys.exit(1)

    @property
    def title(self):
        return "Room temperature %s" % self.zonename

    def execute(self):
        temperature, setpoint, outside_temperature = self.getzoneinfo()
        values = dict()

        values['temp'] = temperature
        values['setpoint'] = setpoint
        values['outside_temperature'] = outside_temperature
        #print "temp.value %s" % temperature
        #print "setpoint.value %s" % setpoint
        return values


if __name__ == "__main__":
    EvohomeMuninPlugin().run()

