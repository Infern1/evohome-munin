#!/usr/bin/env python

"""
    Plugin to show setpoint and measured temperature of hot water.

    To make this plugin work make sure you install the following:

    evohomeclient http://evohome-client.readthedocs.org/en/latest/
    #pip install ./evohome-client

    ex: /etc/munin/plugin-conf.d/plugins
    [evohome*]
    user root

    To activate the plugin copy evohome_Hot_Water to /usr/local/etc/munin/plugins/evohome_Hot_Water
"""


import os
import logging
import time
import sys
import json
import io
from pprint import pprint
from munin import MuninPlugin
from evohomeclient import EvohomeClient

class EvohomeMuninPlugin(MuninPlugin):

    """
    Set the below values to your own account
    """
    username = 'user@mail.com'
    password = 'yoursecretpassword'

    """
    The API does not provide hot water set point only On or Off status. Enter your hot water
    set point and off temperature here which will be used for graphing purposes. Use 'U' for
    hotwateroff if you want no set point displayed during hot water off to allow the graph
    to scale
    """

    hotwateron = 60
    hotwateroff = 0
#    hotwateroff = 'U'

    args = "--base 1000"  # -l 0 --upper-limit 100"
    vlabel = "temperature"
    scale = True

    fields = (
        ('temp', dict(
            label="Temperature",
            info="Hot Water Temperature",
            type="GAUGE",
            max="100",
            min="0"
        )),
        ('setpoint', dict(
            label="Temperature SP",
            info="Hot Water Temperature Setpoint",
            type="GAUGE",
            max="100",
            min="0"
        )),
    )

    category = "evohome"

    # Persistent storage of zone data and session id
    ZONE_DATA = "/tmp/munin-zone-data.json"
    SESSION_ID = "/tmp/munin-session-id.json"

    def __init__(self):
        super(EvohomeMuninPlugin, self).__init__()
        # strip group/other permissions from json cache files
        os.umask(0o077)

    # write zone info to JSON file
    # if the file is not older than 4 minutes we don't need to fetch the data
    def write_zone_info(self):

        data = []
        try:
            stat = os.stat(self.ZONE_DATA)
        except OSError:
            age_minutes = 10
            size = 1
        else:
            age_minutes = (time.time() - stat.st_mtime) / 60
            size = stat.st_size

        if age_minutes > 4:
            # attempt to load previously saved session-id
            try:
                with io.open(self.SESSION_ID, "rb") as f:
                    user_data = json.load(f)
            except (IOError, ValueError):
                user_data = None

            try:
                client = EvohomeClient(self.username, self.password, user_data=user_data)
                for device in client.temperatures():
                    data.append(device)
            except Exception as error:
                sys.stderr.write('Connection failed: ' + str(error) + '\n')
                # truncate zone data cache so subsequent zone instances know a failure occurred.
                with io.open(self.ZONE_DATA, "wb") as f:
                    pass
                sys.exit(1)

            with io.open(self.ZONE_DATA, "wb") as f:
                json.dump(data, f)

            # save session-id so we don't need to re-authenticate every polling cycle. This avoids authentication rate limiting.
            with io.open(self.SESSION_ID, "wb") as f:
                json.dump(client.user_data, f)
        else:
            if size == 0:
                sys.stderr.write('Previous server connection failed. Waiting for next polling cycle to avoid rate limiting.\n')
                sys.exit(1)

    # Get hot water temperature
    def getzoneinfo(self):
        self.write_zone_info()

        # Read hot water zone data
        try:
            with io.open(self.ZONE_DATA, "rb") as f:
                data = json.load(f)
        except (IOError, ValueError):
            data = []

        for i in data:
            if i['thermostat'] == 'DOMESTIC_HOT_WATER':
                temperature = i['temp']
                setpoint = self.hotwateron if i['mode'] == 'DHWOn' else self.hotwateroff
                return temperature, setpoint

        sys.stderr.write('Hot Water zone not found.\n')
        sys.exit(1)

    @property
    def title(self):
        return "Hot Water temperature"

    def execute(self):
        temperature, setpoint = self.getzoneinfo()
        values = dict()

        values['temp'] = temperature
        values['setpoint'] = setpoint
        #print "temp.value %s" % temperature
        #print "setpoint.value %s" % setpoint
        return values


if __name__ == "__main__":
    EvohomeMuninPlugin().run()

